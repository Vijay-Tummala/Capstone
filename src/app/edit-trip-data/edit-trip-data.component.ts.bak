import { Component, OnInit, Input, Output, OnChanges, EventEmitter } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import {MapserviceService} from '../mapservice.service';
import { RiskService } from '../risk.service';
import { TripRiskService } from '../triprisk.service';
import { TaskserviceService } from '../taskservice.service';
import { Observable } from 'rxjs/Observable';
import { Risk } from '../risk';
import { Trip } from '../trip';
import { Task } from '../task';
import {MapComponent} from '../map/map.component';
import {ActivatedRoute} from '@angular/router';
import { isUndefined } from 'util';

@Component({
  selector: 'app-edit-trip-data',
  templateUrl: './edit-trip-data.component.html',
  styleUrls: ['./edit-trip-data.component.css'],
  providers: [MapserviceService, RiskService, TripRiskService, TaskserviceService]
})
export class EditTripDataComponent implements OnChanges {

  @Input() TripID;
  @Input() StopID;
  @Input() isEditTrip;
  @Input() tripJson; 

  update_trip_form: FormGroup;
  update_stop_form: FormGroup;
  add_stop_form: FormGroup;
  tripID;
  editTrip;
  mapObject:MapComponent;
  tripData;
  stopData;
  riskData;
  tripRiskData;
  taskData;
  viewStopID="nil";
  oneTaskData;
  oneRiskData;
  oneStopData;
  oneTripData;
  stripedDate;
  currentTask: number = 0;
  currentRisk: number = 0;
  currentTripRisk: number = 0;
  items: Array<any>;
  teststop;
  trip;
  stop;

  constructor(
    private mapServicing: MapserviceService, 
    private riskService: RiskService, 
    private tripriskService: TripRiskService, 
    private taskService : TaskserviceService,
    private activeRoute:ActivatedRoute, 
    private map:MapComponent,
    private formBuilder: FormBuilder
  ) {
        // build angular form
        this.update_trip_form = this.formBuilder.group({
          trip_name: ["", Validators.required],
          description: ["", Validators.required],
          start_date: ["", Validators.required],
          end_date: ["", Validators.required]
        });    
        this.update_stop_form = this.formBuilder.group({
          StopName: ["", Validators.required],
          Description: ["", Validators.required],
          Lat: ["", Validators.required],
          Lng: ["", Validators.required],
          Location: ["", Validators.required],
          StopID: ["", Validators.required]
        });           
      this.mapObject=map;
      this.tripID=this.mapObject.viewTripID;
      this.editTrip=this.mapObject.isEditTrip;
      console.log("testing trip id value in view data: " + this.tripID);
      console.log("testing trip id value in view data: " + this.mapObject.viewTripID);
   }

   stripDate(date){
      this.stripedDate=date.substring(0, 10);
      console.log("strioed date: " + this.stripedDate);
   }

   triggerEditTripRisk(tripID, stopID) {
     this.mapObject.isTripRiskEdit=true;
     this.mapObject.riskTripID=tripID;
     this.mapObject.riskStopID=stopID;
   }

   triggerEditStop(tripID){
     console.log("triggered edit stops" + tripID);
    this.mapServicing.getStops(tripID)
    .subscribe(
    stop => {
      this.stopData=stop;
      if (Array.isArray(stop) && stop.length) {
        this.mapObject.viewStopID=stop[0].StopID;
        console.log("mapobject viewstopid: " + this.mapObject.viewStopID); 
      }
      console.log(stop);
      console.log(this.stopData);
      //this.stopData=stop[0].StopID;
    });    
   }

   editViewStopData(stopID) {
    console.log("inside edit view stop data");
    console.log("inside edit view stop data:  " + stopID);

    this.viewStopID=stopID;
    this.mapServicing.getStopByStopID(this.viewStopID)
     .subscribe(stop => {
        this.oneStopData=stop[0];
      console.log(this.oneStopData);
      });
   }

   editStopFields(stopID){ 

    this.viewStopID=stopID;
    this.mapServicing.getStopByStopID(this.viewStopID)
     .subscribe(stop => {
        this.stop=stop;
        this.oneStopData=stop[0];
      console.log(this.oneStopData);

        //dealing with default untouched values
        if (!this.update_stop_form.value.StopName) {
            this.update_stop_form.patchValue({StopName: this.stop[0].StopName});
        } 
        if (!this.update_stop_form.value.Lat) {
            this.update_stop_form.patchValue({Lat: this.stop[0].Lat});
        } 
        if (!this.update_stop_form.value.Lng) {
            this.update_stop_form.patchValue({Lng: this.stop[0].Lng});
        } 
        if (!this.update_stop_form.value.Description) {
            this.update_stop_form.patchValue({Description: this.stop[0].Description});
        }     
        if (!this.update_stop_form.value.Location) {
            this.update_stop_form.patchValue({Location: this.stop[0].Location});
        }   
        if (!this.update_stop_form.value.StopID) {
            this.update_stop_form.patchValue({StopID: this.stop[0].StopID});
        }   


        console.log(this.update_stop_form.value);
        this.mapServicing.updateStopByStopID(this.update_stop_form.value,this.viewStopID).subscribe(
            res=>{
                    // go back to list
                    console.log("res is: "+res);
                    console.log("trip id is: " + this.stop[0].TripID);
                    this.triggerEditStop(this.stop[0].TripID);
                },
                error => console.log("error while updating stop: " + error)     
            );           
     });   
   }

   changeMapSetting(){
    this.mapObject.isReadonly = false;
    this.mapObject.clearFields();
    this.mapObject.isCreateSuccessful = false;
    this.mapObject.isUpdateSuccessful = false;
    this.mapObject.isEdit = false;       
   }

   editDeleteStopData(tripID, stopID){
    console.log("stop in remove",stopID);
    this.mapServicing.deleteStopByStopID(stopID).subscribe(
      res=>{
        console.log("res is: " + res);
        this.triggerEditStop(tripID);
      } 
    );
  }

   unsetEditFlag(){
       this.mapObject.isStopRiskEdit=false;
       this.mapObject.isStopTaskEdit=false;
       this.mapObject.isTripRiskEdit=false;
       this.mapObject.isEditTrip=false;
   }

   editStopRisks(tripID, stopID){
       this.mapObject.isStopRiskEdit=true;
       this.mapObject.riskTripID=tripID;
       this.mapObject.riskStopID=stopID;
   }

   editStopTasks(tripID, stopID){
    this.mapObject.isStopTaskEdit=true;
    this.mapObject.riskTripID=tripID;
    this.mapObject.riskStopID=stopID;
}

   updateTrip(){

    this.mapServicing.getTripById(this.mapObject.viewTripID)
    .subscribe(trip => {     
        this.trip=trip;         
        this.oneTripData=trip[0];
        console.log(this.trip[0]);

        //dealing with default untouched values
        if (!this.update_trip_form.value.trip_name) {
            this.update_trip_form.patchValue({trip_name: this.trip[0].TripName});
        } 
        if (!this.update_trip_form.value.start_date) {
            this.update_trip_form.patchValue({start_date: this.trip[0].StartDate});
        } 
        if (!this.update_trip_form.value.end_date) {
            this.update_trip_form.patchValue({end_date: this.trip[0].EndDate});
        } 
        if (!this.update_trip_form.value.description) {
            this.update_trip_form.patchValue({description: this.trip[0].Description});
        } 
        // send data to server
        this.mapServicing.updateTrip(this.update_trip_form.value,this.mapObject.viewTripID)
            .subscribe( 
                trip => {
                    // go back to list of risks
                    this.readTrips();
                },
                error => console.log(error)
            );

    });     
   }

   editUpdateStop(){
    this.mapServicing.getTripById(this.mapObject.viewTripID)
    .subscribe(stop => {     
        this.stop=stop;         
        this.oneStopData=stop[0];
        console.log(this.stop[0]);

        //dealing with default untouched values
        if (!this.update_stop_form.value.stop_name) {
            this.update_stop_form.patchValue({stop_name: this.stop[0].StopName});
        } 
        if (!this.update_stop_form.value.lat) {
            this.update_stop_form.patchValue({lat: this.stop[0].Lat});
        } 
        if (!this.update_stop_form.value.lng) {
            this.update_stop_form.patchValue({lng: this.stop[0].Lng});
        } 
        if (!this.update_stop_form.value.stop_desc) {
            this.update_stop_form.patchValue({stop_desc: this.stop[0].Description});
        } 
        if (!this.update_stop_form.value.stop_loc) {
          this.update_stop_form.patchValue({stop_loc: this.stop[0].Location});
        } 
        // send data to server
        this.mapServicing.updateStopWithStopID(this.update_stop_form.value,this.mapObject.viewTripID)
            .subscribe( 
                onestop => {
                    // go back to list of risks
                    this.editViewStopData(onestop.stop_id);
                    console.log("edit update stop trigger view stop: " + onestop.stop_id);
                },
                error => console.log(error)
            );

    });         
   }

   readTrips(){
    //pass trip id 
    this.mapServicing.getTripById(this.mapObject.viewTripID)
    .subscribe(trip => {
      this.tripData=trip[0];
      console.log(trip);
      console.log(this.tripData);
    }); 
   }
   ngOnChanges(){

    this.readTrips();
    this.triggerEditStop(this.mapObject.viewTripID); 
}
}
